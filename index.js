const LOGO_ASCII =
`

          _   _                          _ _ 
         | | (_)                        (_) |
 _ __ ___| |_ _ _ __ ___ _ __ ___   __ _ _| |
| '__/ _ \\ __| | '__/ _ \\ '_ \` _ \\ / _\` | | |
| | |  __/ |_| | | |  __/ | | | | | (_| | | |
|_|  \\___|\\__|_|_|  \\___|_| |_| |_|\\__,_|_|_|

By violetwtf | retiremail@violet.wtf | git.io/retiremail

`

const CREDIT = "Message generated by ";
const LINK = "https://git.io/retiremail";

const notifier = require("mail-notifier");
const sg = require("@sendgrid/mail");

// Enable CatLoggr Globally
new (require("cat-loggr"))().setGlobal();

const config = require("./config.json");

sg.setApiKey(config.auth.sendgridKey);

// Top-level config values. Declared like this due to reference repitition.
const { 
    auth, 
    imap, 
    accounts, 
    message, 
    personalMessage,
    suspendedMessage,
    projectMessage, 
    githubMessage
} = config;

// IMAP config values. Declared like this for simplicity (see line 56)
const { host, port, tls, authTimeout } = imap;

console.init(LOGO_ASCII);

for (const address in accounts) {
    console.info("Attempting to bind to: " + address);

    const account = accounts[address];

    notifier({ 
        // If the accounts' addresses are their usernames, use that, otherwise,
        // use the defined one.
        user: auth.addressIsUsername ? address : account.user,
        
        // If all of the passwords are the same, use that password, otherwise,
        // use the defined one.
        password: auth.globalPassword ? auth.password : account.password,

        // Other IMAP connection variables
        host, port, tls, authTimeout
    })
    // When we get a mail, process it based on the address
    .on("mail", mail => processMail(address, account, mail))
    // We probably wanna know if we're successful, too.
    .on("connected", () => console.info("Successfully bound: " + address))
    // If the login fails, we better know about it.
    .on("error", err => displayError(address, err))
    // Start the notifier for that address
    .start();
}

function displayError(address, err) { 
    console.error(`Could not bind to ${address}: ${err}`);
}

function buildMessage(address, account) {

    /* Emails can be read in either text or HTML format, so we have to build
    for both. \n is a linebreak for text, <br> for HTML. This is why we store
    the message as a string[], as opposed to a string. */
    let text = message.join("\n");
    let html = message.join("<br>");

    // Now for some variable-specific additions.
    /* TODO: Make this some sort of algorithmic "this property, this message"
    loop.*/

    // Personal message. Nothing special here.
    if (account.personal) {
        // If the account is suspended, we display a different message.
        if (account.suspended) {
            text += suspendedMessage.join("\n");
            html += suspendedMessage.join("<br>");
        }
        // If they're not suspended, we'll give them a generic message.
        else {
            text += personalMessage.join("\n");
            html += personalMessage.join("<br>");
        }
    }
    // If it's not personal, it's a project.
    else {
        text += projectMessage.join("\n");
        html += projectMessage.join("<br>");
    }

    // GitHub!
    if (account.github) {
        // Build the basic URL.
        const url = "https://github.com/" + account.github;

        // We can replace seperately here, because we have to deal with
        // different link styles.
        text += githubMessage.join("\n").replace("$github", url);
        // We have to do fancy stuff for the HTML link.
        html += 
            githubMessage
            .join("<br>")
            .replace("$github", `<a href=${url}>${url}</a>`);
    }

    // Almost done! Let's credit ourselves really quick. (If you let us)
    if (config.includeRetiremailCredit) {
        text += CREDIT + "Retiremail. " + LINK;
        html += CREDIT + `<a href=${LINK}>Retiremail</a>`;
    }

    // Finally, we can return our variables.
    return { text, html };
}

function processMail(email, account, mail) {

    // For some reason, from is an array.
    const { name, address } = mail.from[0];

    console.info("Recieved email on: " + email);

    // Get the message from the Magical Message Builder(TM)
    const { text, html } = buildMessage(email, account);

    // If the account name is set, use it. Otherwise, shameless self-promotion.
    const fromName = account.name ? account.name : "Retiremail";

    // Send a mail through SendGrid
    sg.send({
        // Return to sender
        to: `${name} <${address}>`,
        subject: "Message Failed: Email Address Retired",
        from: `${fromName} <${email}>`,
        text, html
    });
}
